FROM node:18-alpine

WORKDIR /app

# Copy package.json and package-lock.json first for better caching
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application
COPY . .

# Build the app to generate static pages, then start dev server
# We'll use a script that builds and then copies static files to public
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'echo "🏗️ Building app and generating static pages..."' >> /start.sh && \
    echo 'npm run build' >> /start.sh && \
    echo 'echo "📁 Copying static pages to public directory for dev access..."' >> /start.sh && \
    echo 'mkdir -p public/activities' >> /start.sh && \
    echo 'cp -r build/activities/* public/activities/ 2>/dev/null || true' >> /start.sh && \
    echo 'echo "🚀 Starting development server..."' >> /start.sh && \
    echo 'npm start' >> /start.sh && \
    chmod +x /start.sh

# Create a script to handle npm installs when the container starts
RUN echo '#!/bin/sh' > /entrypoint.sh && \
    echo 'if [ ! -d "/app/node_modules" ] || [ ! "$(ls -A /app/node_modules)" ]; then' >> /entrypoint.sh && \
    echo '  echo "Installing dependencies..."' >> /entrypoint.sh && \
    echo '  npm install' >> /entrypoint.sh && \
    echo 'fi' >> /entrypoint.sh && \
    echo 'exec "$@"' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]

# Start with our custom script that builds first, then serves
CMD ["/start.sh"]