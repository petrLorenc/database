AWSTemplateFormatVersion: '2010-09-09'
Description: 'Activity Database Chatbot - Serverless Architecture'

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket for storing static website files and activities data
    Default: activity-database-chatbot
  
  OpenAIAPIKeySecretName:
    Type: String
    Description: Name of the secret in AWS Secrets Manager storing the OpenAI API key
    Default: openai-api-key

Resources:
  # S3 Buckets
  ActivityBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET]
            AllowedOrigins: ['*']
            MaxAge: 3000
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  ActivityBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ActivityBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join ['', ['arn:aws:s3:::', !Ref ActivityBucket, '/*']]

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Select [2, !Split ['/', !GetAtt ActivityBucket.WebsiteURL]]
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100

  # Secrets Manager for OpenAI API Key
  OpenAIAPIKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref OpenAIAPIKeySecretName
      Description: OpenAI API Key for Activity Database Chatbot
      SecretString: '{"OPENAI_API_KEY": "your-api-key-placeholder"}'

  # IAM Roles for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Join ['', ['arn:aws:s3:::', !Ref ActivityBucket, '/*']]
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OpenAIAPIKeySecret

  # Lambda Functions
  QueryProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: activity-database-query-processor
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ActivityBucket
        S3Key: lambda/query_processor.zip
      Runtime: python3.9
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          OPENAI_API_KEY_SECRET: !Ref OpenAIAPIKeySecret

  SearchEngineFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: activity-database-search-engine
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ActivityBucket
        S3Key: lambda/search_engine.zip
      Runtime: python3.9
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          ACTIVITIES_BUCKET_NAME: !Ref ActivityBucket
          ACTIVITIES_FILE_KEY: activities.json

  ResultEnhancerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: activity-database-result-enhancer
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ActivityBucket
        S3Key: lambda/result_enhancer.zip
      Runtime: python3.9
      Timeout: 10
      MemorySize: 256
      Environment:
        Variables:
          OPENAI_API_KEY_SECRET: !Ref OpenAIAPIKeySecret

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ActivityDatabaseChatbotAPI
      Description: API for Activity Database Chatbot
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  ProcessQueryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: process-query

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: search

  EnhanceResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: enhance

  # API Gateway Methods
  ProcessQueryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ProcessQueryResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QueryProcessorFunction.Arn}/invocations

  SearchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref SearchResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchEngineFunction.Arn}/invocations

  EnhanceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref EnhanceResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResultEnhancerFunction.Arn}/invocations

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProcessQueryMethod
      - SearchMethod
      - EnhanceMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: dev

  # Lambda Permissions for API Gateway
  QueryProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref QueryProcessorFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/process-query

  SearchEnginePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SearchEngineFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/search

  ResultEnhancerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResultEnhancerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/enhance

Outputs:
  WebsiteURL:
    Description: URL for the S3 website
    Value: !GetAtt ActivityBucket.WebsiteURL

  CloudFrontDistributionDomainName:
    Description: Domain name for the CloudFront distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev